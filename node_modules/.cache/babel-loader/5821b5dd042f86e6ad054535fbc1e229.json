{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/\\u7A0B\\u5F0F\\u958B\\u767C/realtime-weather-app/src/WeatherApp.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from 'emotion-theming';\nimport dayjs from 'dayjs';\nimport WeatherCard from './WeatherCard';\nimport useWeatherApi from './useWeatherApi';\nimport sunriseAndSunsetData from './sunrise-sunset.json';\nimport WeatherSetting from './WeatherSetting';\nimport { findLocation } from './utils';\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282'\n  },\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow: '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc'\n  }\n};\nconst Container = styled.div`\n  background-color: ${({\n  theme\n}) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst getMoment = locationName => {\n  const location = sunriseAndSunsetData.find(data => data.locationName === locationName);\n  if (!location) return null;\n  const now = dayjs();\n  const nowDate = Intl.DateTimeFormat('zh-TW', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  }).format(now).replace(/\\//g, '-');\n  const locationDate = location.time && location.time.find(time => time.dataTime === nowDate);\n  const sunriseTimestamp = dayjs(`${locationDate.dataTime} ${locationDate.sunrise}`).unix();\n  const sunsetTimestamp = dayjs(`${locationDate.dataTime} ${locationDate.sunset}`).unix();\n  const nowTimeStamp = now.unix();\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp ? 'day' : 'night';\n};\n\nconst WeatherApp = () => {\n  // console.log('--- invoke function component ---');\n  const storageCity = localStorage.getItem('cityName');\n  const [currentCity, setCurrentCity] = useState(storageCity || '臺北市');\n  const currentLocation = findLocation(currentCity) || {};\n  const [weatherElement, fetchData] = useWeatherApi(currentLocation);\n  const [currentTheme, setCurrentTheme] = useState('light');\n  const [currentPage, setCurrentPage] = useState('WeatherCard');\n  const moment = useMemo(() => getMoment(currentLocation.sunriseCityName), [currentLocation.sunriseCityName]);\n  useEffect(() => {\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark');\n  }, [moment]);\n  useEffect(() => {\n    localStorage.setItem('cityName', currentCity);\n  }, [currentCity]);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme[currentTheme],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, currentPage === 'WeatherCard' && /*#__PURE__*/React.createElement(WeatherCard, {\n    cityName: currentLocation.cityName,\n    weatherElement: weatherElement,\n    moment: moment,\n    fetchData: fetchData,\n    setCurrentPage: setCurrentPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), currentPage === 'WeatherSetting' && /*#__PURE__*/React.createElement(WeatherSetting, {\n    cityName: currentLocation.cityName,\n    setCurrentCity: setCurrentCity,\n    setCurrentPage: setCurrentPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default WeatherApp;","map":{"version":3,"sources":["/Users/kevin/Documents/程式開發/realtime-weather-app/src/WeatherApp.js"],"names":["React","useState","useEffect","useMemo","styled","ThemeProvider","dayjs","WeatherCard","useWeatherApi","sunriseAndSunsetData","WeatherSetting","findLocation","theme","light","backgroundColor","foregroundColor","boxShadow","titleColor","temperatureColor","textColor","dark","Container","div","getMoment","locationName","location","find","data","now","nowDate","Intl","DateTimeFormat","year","month","day","format","replace","locationDate","time","dataTime","sunriseTimestamp","sunrise","unix","sunsetTimestamp","sunset","nowTimeStamp","WeatherApp","storageCity","localStorage","getItem","currentCity","setCurrentCity","currentLocation","weatherElement","fetchData","currentTheme","setCurrentTheme","currentPage","setCurrentPage","moment","sunriseCityName","setItem","cityName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from 'emotion-theming';\nimport dayjs from 'dayjs';\nimport WeatherCard from './WeatherCard';\nimport useWeatherApi from './useWeatherApi';\nimport sunriseAndSunsetData from './sunrise-sunset.json';\nimport WeatherSetting from './WeatherSetting';\nimport { findLocation } from './utils';\n\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282',\n  },\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow:\n      '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc',\n  },\n};\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst getMoment = (locationName) => {\n  const location = sunriseAndSunsetData.find(\n    (data) => data.locationName === locationName\n  );\n\n  if (!location) return null;\n\n  const now = dayjs();\n  const nowDate = Intl.DateTimeFormat('zh-TW', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n  })\n    .format(now)\n    .replace(/\\//g, '-');\n\n  const locationDate =\n    location.time && location.time.find((time) => time.dataTime === nowDate);\n  const sunriseTimestamp = dayjs(\n    `${locationDate.dataTime} ${locationDate.sunrise}`\n  ).unix();\n  const sunsetTimestamp = dayjs(\n    `${locationDate.dataTime} ${locationDate.sunset}`\n  ).unix();\n\n  const nowTimeStamp = now.unix();\n\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp\n    ? 'day'\n    : 'night';\n};\n\nconst WeatherApp = () => {\n  // console.log('--- invoke function component ---');\n  const storageCity = localStorage.getItem('cityName');\n  const [currentCity, setCurrentCity] = useState(storageCity || '臺北市');\n  const currentLocation = findLocation(currentCity) || {};\n\n  const [weatherElement, fetchData] = useWeatherApi(currentLocation);\n\n  const [currentTheme, setCurrentTheme] = useState('light');\n  const [currentPage, setCurrentPage] = useState('WeatherCard');\n\n  const moment = useMemo(() => getMoment(currentLocation.sunriseCityName), [\n    currentLocation.sunriseCityName,\n  ]);\n\n  useEffect(() => {\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark');\n  }, [moment]);\n\n  useEffect(() => {\n    localStorage.setItem('cityName', currentCity);\n  }, [currentCity]);\n\n  return (\n    <ThemeProvider theme={theme[currentTheme]}>\n      <Container>\n        {currentPage === 'WeatherCard' && (\n          <WeatherCard\n            cityName={currentLocation.cityName}\n            weatherElement={weatherElement}\n            moment={moment}\n            fetchData={fetchData}\n            setCurrentPage={setCurrentPage}\n          />\n        )}\n\n        {currentPage === 'WeatherSetting' && (\n          <WeatherSetting\n            cityName={currentLocation.cityName}\n            setCurrentCity={setCurrentCity}\n            setCurrentPage={setCurrentPage}\n          />\n        )}\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default WeatherApp;\n"]},"metadata":{},"sourceType":"module"}